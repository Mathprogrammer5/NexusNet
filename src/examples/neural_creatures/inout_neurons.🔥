# defines neurons with an input and output for the digital creatures
from Neural.neuron import Neuron#, Cell
from Neural.activations import sigmoid
from Neural.tensorwrap import Vector
from random import random_float64 as rf64

trait IONeuron(Neuron):

  '''
  Simple trait for cells with an input and an output.
  '''
  
  async fn eval_outs(inout self):
    ...

struct InternalNeuron(IONeuron):

  var value: Float64
  var inputs: Tuple[Neuron]
  var outputs: Tuple[Neuron]
  var weights: Vector
  var bias: Float64

  fn __init__(inout self) raises:
    self.value = 0
    self.inputs = Tuple[Neuron](Neuron())
    self.outputs = Tuple[Neuron](Neuron())
    self.weights = Vector()
    self.bias = rf64(-4, 4)

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    self.inputs = other.inputs
    self.outputs = other.outputs
    self.weights = other.weights
    self.bias = other.bias

  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value
    self.inputs = other.inputs
    self.outputs = other.outputs
    self.weights = other.weights
    self.bias = other.bias
  
  fn eval(inout self) raises:
    pass
  
  async fn eval_outs(inout self):
    pass
