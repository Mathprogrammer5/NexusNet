# defines sensory neurons for the digital creatures
from Neural.neuron import Neuron#, Cell

trait InNeuron(Neuron):
  
  '''
  Simple trait for input cells.
  '''

  fn __init__(inout self):
    ...

  fn add_output(inout self, n: Neuron):
    ...

  async fn getdata(inout self):
    ...

  async fn eval_outs(inout self):
    ...

struct InPD(InNeuron):
  
  '''
  Detects the Pheromone 
  Density in the vicinity 
  of the creature.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InNWD(InNeuron):
  
  '''
  Detects the distance 
  to the north wall of the map.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InEWD(InNeuron):
  
  '''
  Detects the distance 
  to the east wall of the map.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InSWD(InNeuron):
  
  '''
  Detects the distance 
  to the south wall of the map.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InWWD(InNeuron):
  
  '''
  Detects the distance 
  to the west wall of the map.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InCD(InNeuron):
  
  '''
  Detects the local creature density.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InCS(InNeuron):
  
  '''
  Detects how many creatures 
  are south to the creature.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InCN(InNeuron):

  '''
  Detects how many creatures 
  are north to the creature.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InCW(InNeuron):
  
  '''
  Detects how many creatures 
  are west to the creature.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InCE(InNeuron):
  
  '''
  Detects how many creatures 
  are east to the creature.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct In_T(InNeuron):
  
  '''
  Returns for how many ticks the simulation has been running.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InPos_X(InNeuron):
  
  '''
  Returns the position of the creature along the X axis.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return

struct InPos_Y(InNeuron):
  
  '''
  Returns the position of the creature along the Y axis.
  '''

  var value: Float32
  var outputs: DynamicVector[Neuron]

  fn __init__(inout self):
    self.value = 0

  async fn getdata(inout self):
    pass

  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
    
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value

  fn add_output(inout self, n: Neuron):
    self.outputs.append(n)

  fn eval(inout self):
    self.getdata()

  async fn eval_outs(inout self):
    for n in range(len(self.outputs)):
      self.outputs[n].eval()
    del n
    return
