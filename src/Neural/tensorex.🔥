# defines vector manipulation functions
from random import random_float64
from random import seed
from tensor import TensorShape

alias float: DType = DType.float64

struct Vector(Sized):
  
  var data: Tensor[float]
  var size: Int
  var _offset: Int

  fn __init__(inout self) raises:
    self.size = 0
    self._offset = 0
    self.data = Tensor[float]()

  fn __init__(inout self, size: Int) raises:
    self.size = size
    self._offset = 0
    self.data = Tensor[float](size)

  fn __init__(inout self, data: Tensor[float]) raises:
    if data.rank() != 1:
      raise Error("Unable to convert given data to a vector due to rank mismatch")
    self.data = data
    self._offset = 0
    self.size = data.dim(0)

  fn __copyinit__(inout self, borrowed other: Self):
    self.data = other.data
    self._offset = other._offset
    self.size = other.size

  fn __moveinit__(inout self, owned other: Self):
    self.data = other.data
    self._offset = other._offset
    self.size = other.size

  fn __getitem__(self, index: Int) -> Float64:
    return self.data[index]

  fn __len__(self) -> Int:
    return self.size

  fn __iter__(self) raises -> Vector:
    return self.data

  fn __next__(inout self) raises -> Float64:
    if self._offset >= self.size:
      raise Error("Index out of range of vector")
    self._offset += 1
    return self.data[self._offset]

  fn __mul__(borrowed self, vec: Vector) raises -> Float64:
    return (self.data * vec.data)[0]

  fn __add__(self, vec: Vector) raises -> Vector:
    if  vec.data.dim(0) != self.data.dim(0):
      raise Error("Unable to add vectors due to dimension mismatch")
    var val = Vector()
    for i in range(self.data.dim(0)):
      val.append(
        self.data[i] + vec.data[i]
      )
    return val

  fn append(inout self, data: Float64) raises:
    self.data = self.data.reshape(
      TensorShape(
        self.data.shape().num_elements()+1
        )
      )
    self.data.simd_store(-1, data)

  # defines function for generating random vectors with Float64 values
  fn randvec(inout self, len: Int) raises:
    self.data = Tensor[float](len)
    seed()
    for i in range(len):
      self.data.simd_store[1](i, random_float64())

struct Matrix:

  var data: Tensor[float]
  var dim_0: Int
  var dim_1: Int

  fn __init__(inout self) raises:
    self.data = Tensor[float]()
    self.dim_0 = 0
    self.dim_1 = 0

  fn __init__(inout self, data: Tensor[float]) raises:
    if data.rank() != 2:
      raise Error("Unable to convert given data to a matrix due to rank mismatch")
    self.data = data
    self.dim_0 = data.dim(0)
    self.dim_1 = data.dim(1)

  fn __copyinit__(inout self, borrowed other: Self):
    self.data = other.data
    self.dim_0 = other.dim_0
    self.dim_1 = other.dim_1

  fn __moveinit__(inout self, owned other: Self):
    self.data = other.data
    self.dim_0 = other.dim_0
    self.dim_1 = other.dim_1

  # defines function for matrix-vector multiplication
  fn __mul__(borrowed self, vec: Vector) raises-> Vector:
    if vec.data.dim(0) != self.data.dim(1):
      raise Error("Cannot multiply due to dimension mismatch")

    var val = Vector(Tensor[float](self.data.dim(0)))

    for i in range(self.data.dim(0)):
      # multiplies input vector with rows of matrix
      val.data[i] = vec * 
        Vector(
          # returns the i-th row of the matrix as Tensor value
          self.data.clip(
            self.data.dim(1)*i, 
            self.data.dim(1)*(i+1)-1
          )
        )
    
    return val

  # defines function for weightsum
  fn __rmul__(borrowed self, vec: Vector) raises-> Vector:
    return self.__mul__(vec)

  # defines function for generating random vectors with Float64 values
  fn random_matrix(inout self, dim_a: Int, dim_b: Int) raises:
    
    self.data = self.data.reshape(
      TensorShape(
        dim_a,
        dim_b
        )
      )
    
    seed()
    
    for i in range(dim_a):
      for j in range(dim_b):
        self.data.simd_store[1](
          VariadicList(i, j), 
          random_float64()
          )

# might produce errors due to __iter__ method
fn vector_applicable(func: fn(Float64) -> Float64) -> fn(Vector) raises capturing -> Vector:
  fn vecfunc(vec: Vector) raises -> Vector:
    var val = Vector()
    for i in vec:
      val.append(func(i))
    return val
    
  return vecfunc
