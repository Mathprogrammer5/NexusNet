# defines vector manipulation functions
from random import random_float64
from random import seed
from tensor import TensorShape

alias float: DType = DType.float64

struct Vector:
  
  var data: Tensor[float]
  var size: Int

  fn __init__[size: Int](inout self):
    self.size = size
    self.data = Tensor[float](size)

  fn __init__(inout self, data: Tensor[float]) raises:
    if data.rank() != 1:
      raise Error("Unable to convert given data to a vector due to rank mismatch")
    self.data = data
    self.size = data.shape()[0]

  fn __mul__(borrowed self, vec: Vector) raises-> Vector:
    return self.data * vec.data

  fn __copyinit__(inout self, borrowed other: Self):
    self.data = other.data
    self.size = other.size

  fn __moveinit__(inout self, owned other: Self):
    self.data = other.data
    self.size = other.size

  fn append(inout self, data: Float64) raises:
    self.data = self.data.reshape(
      TensorShape(
        self.data.shape().num_elements()+1
        )
      )
    self.data.simd_store(-1, data)

struct Matrix:

  var data: Tensor[float]

  fn __init__(inout self, data: Tensor[float]) raises:
    if data.rank() != 2:
      raise Error("Unable to convert given data to a matrix due to rank mismatch")
    self.data = data

  # defines function for weightsum
  fn __mul__(borrowed self, vec: Vector) raises-> Vector:
    if vec.data.dim(0) != self.data.dim(1):
      raise Error("Cannot multiply due to dimension mismatch")
    var val = Vector(Tensor[float](self.data.dim(0)))
    for i in range(self.data.dim(0)):
      val.data[i] = (vec * Vector(self.data.clip(self.data.dim(0)*i, self.data.dim(0)*(i+1)-1))).data[0]
    return val

  # defines function for weightsum
  fn __rmul__(borrowed self, vec: Vector) raises-> Vector:
    return self.__mul__(vec)

# defines function for generating random vectors with Float64 values
fn randvec(len: Int) -> DynamicVector[Float64]:
  seed()
  var vec: DynamicVector[Float64] = DynamicVector[Float64]()
  for i in range(len):
    vec.append(random_float64())
  return vec

# defines function to log a vector to the console
fn logvec(vec: DynamicVector[Float64]):
  for i in range(len(vec)):
    print(vec[i])
