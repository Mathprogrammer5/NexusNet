# defines layer trait and structs conforming to it
import Neural.activations as act
from tensor import Tensor, TensorShape, TensorSpec

alias float: DType = DType.float64

# Layer trait
trait Layer(CollectionElement):

  """
  A trait implementing methods for
  Neural Network layers.
  """
  
  fn __init__(inout self):
    ...

  fn __copyinit__(inout self, borrowed other: Self):
    ...

  fn __moveinit__(inout self, owned other: Self):
    ...

  fn out(inout self: Self) -> Tensor[float]:
    ...

  fn eval(inout self, a: Float64 = 0) raises:
    ...

struct Flatten(Layer):

  var in_layer: Layer
  var value: Tensor[float]

  fn __init__(inout self):
    self.in_layer = Layer()
    self.value = Tensor[float]()
  
  fn __copyinit__(inout self, borrowed other: Self):
    self.in_layer = other.in_layer
    self.value = other.value
  
  fn __moveinit__(inout self, owned other: Self):
    self.in_layer = other.in_layer
    self.value = other.value
  
  fn out(inout self: Self) -> Tensor[float]:
    return self.value
  
  fn eval(inout self, a: Float64 = 0) raises:
    pass

struct Dense(Layer):

  var in_layer: Layer
  var neurons: Int 
  var activation: Int16
  var weights: Tensor[float]
  var biases: Tensor[float]
  var values: Tensor[float]

  fn __init__(inout self):

    self.in_layer = Layer()
    self.neurons = -1
    self.activation = -1
    self.weights = Tensor[float]()
    self.biases = Tensor[float]()
    self.values = Tensor[float]()
  
  fn __init__(inout self, neurons: Int, prec_layer: Layer, act: Int16):
    
    self.__init__()
    self.in_layer = prec_layer
    self.neurons = neurons
    self.activation = act

  fn __copyinit__(inout self, borrowed other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  fn __moveinit__(inout self, owned other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  fn out(inout self: Self) -> Tensor[float]:
    return self.values

  fn eval(inout self, a: Float64 = 0) raises:
    self.values = self.values * self.weights + self.biases

struct Conv2D(Layer):
  
  var in_layer: Layer
  var neurons: Int 
  var activation: Int16
  var weights: Tensor[float]
  var bias: Float64
  var values: Tensor[float]

  fn __init__(inout self):

    self.in_layer = Layer()
    self.neurons = -1
    self.activation = -1
    self.weights = Tensor[float]()
    self.bias = 0
    self.values = Tensor[float]()
  
  fn __init__(inout self, neurons: Int, prec_layer: Layer, act: Int16):
    
    self.__init__()
    self.in_layer = prec_layer
    self.neurons = neurons
    self.activation = act

  fn __copyinit__(inout self, borrowed other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.bias = other.bias
    self.values = other.values

  fn __moveinit__(inout self, owned other: Self):
    self.in_layer = other.in_layer
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.bias = other.bias
    self.values = other.values

  fn out(inout self: Self) -> Tensor[float]:
    return self.values

  fn eval(inout self, a: Float64 = 0) raises:
    pass
