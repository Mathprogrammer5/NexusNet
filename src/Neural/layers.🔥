# defines layer trait and structs conforming to it
import Neural.activations as act
from Neural.tensorwrap import TensorWrapper, MDTensorWrapper, Vector, Matrix, VectorP

alias float: DType = DType.float64

# Layer trait
trait Layer():

  """
  A trait implementing methods for
  Neural Network layers.
  """
  
  fn __copyinit__(inout self, borrowed other: Self):
    ...

  fn __moveinit__(inout self, owned other: Self):
    ...

alias LayerP = Pointer[Layer]

struct Flatten(Layer):

  var value: Vector

  fn __init__(inout self, owned in_layer: Layer) raises:
    self.value = Vector()
  
  fn __copyinit__(inout self, borrowed other: Self):
    self.value = other.value
  
  fn __moveinit__(inout self, owned other: Self):
    self.value = other.value
  
  fn eval(inout self, input: TensorWrapper, a: Float64 = 0) raises:
    pass

struct Dense(Layer):

  var neurons: Int 
  var activation: act.vec_activation_fn
  var weights: Matrix
  var biases: Vector
  var values: Vector

  fn __init__(inout self, neurons: Int, owned prec_layer: Layer, act: act.vec_activation_fn) raises:
    
    self.neurons = neurons
    self.activation = act
    self.weights = Matrix(); self.weights.random_matrix(neurons, 0)
    self.biases = Vector(); self.biases.random_vector(neurons)
    self.values = Vector()

  fn __copyinit__(inout self, borrowed other: Self):
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  fn __moveinit__(inout self, owned other: Self):
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  @always_inline
  fn eval(inout self, input: Vector, a: Float64 = 0) raises:
    self.values = self.activation(input * self.weights + self.biases, a)

struct Conv2D(Layer):
  
  var neurons: Int 
  var activation: Int16
  var weights: Matrix
  var biases: Vector
  var values: Vector

  fn __init__(inout self, neurons: Int, owned prec_layer: Layer, act: Int16) raises:
    
    self.neurons = neurons
    self.activation = act
    self.weights = Matrix(); self.weights.random_matrix(neurons, 0)
    self.biases = Vector(); self.biases.random_vector(neurons)
    self.values = Vector()

  fn __copyinit__(inout self, borrowed other: Self):
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  fn __moveinit__(inout self, owned other: Self):
    self.neurons = other.neurons
    self.activation = other.activation
    self.weights = other.weights
    self.biases = other.biases
    self.values = other.values

  fn eval(inout self, input: Vector, a: Float64 = 0) raises:
    pass
