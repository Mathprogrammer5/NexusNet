# defines the Neuron trait and structs conforming to the Neuron trait
from Neural.tensorwrap import Vector
from random import random_float64

'''
This module is intended for use
in evolutionary simulations,
for example biosim4 
(https://github.com/davidrmiller/biosim4)
'''

# Neuron trait
trait Neuron(CollectionElement):

  '''
  This trait is planned as a interface 
  to programm own Neuron structs and classes.
  '''

  fn __init__(inout self) raises:
    ...

  fn __copyinit__(inout self, borrowed other: Self):
    ...
    
  fn __moveinit__(inout self, owned other: Self):
    ...

  fn eval(inout self) raises:
    ...

# Normcell struct conforming to Neuron trait
struct Cell(Neuron):

  '''
  This struct is intended to be inhereted 
  by own custom structs.
  '''

  var input: Vector
  var weights: Vector
  var bias: Float64
  var value: Float64
  var activation: Int16

  fn  __init__(inout self) raises:
    self.value = 0
    self.input = Vector()
    self.activation = -1
    self.weights = Vector()
    self.bias = 0


  fn __init__(inout self, input: Vector, activation: Int16) raises:
    self.value = 0
    self.input = input
    self.activation = activation
    self.weights = Vector(); self.weights.random_vector(len(input))
    self.bias = random_float64()
  
  fn __moveinit__(inout self, owned other: Self):
    self.input = other.input
    self.weights = other.weights
    self.bias = other.bias
    self.value = other.value
    self.activation = other.activation

  fn __copyinit__(inout self, borrowed other: Self):
    self.input = other.input
    self.weights = other.weights
    self.bias = other.bias
    self.value = other.value
    self.activation = other.activation

  fn eval(inout self) raises:
    self.value = self.input * self.weights + self.bias
